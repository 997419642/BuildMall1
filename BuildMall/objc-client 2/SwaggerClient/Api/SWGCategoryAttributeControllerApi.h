#import <Foundation/Foundation.h>
#import "SWGMallCategoryAttribute.h"
#import "SWGMessageResult.h"
#import "SWGApi.h"

/**
* Youmu Cloud Framework Swagger API 
* https://www.51wood.com
*
* OpenAPI spec version: 1.0
* Contact: archerchu@163.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGCategoryAttributeControllerApi: NSObject <SWGApi>

extern NSString* kSWGCategoryAttributeControllerApiErrorDomain;
extern NSInteger kSWGCategoryAttributeControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// 根据类目id和属性名称查询属性信息
/// 根据类目id和属性名称查询属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// @param attrName 属性名称
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) categoryAttributeListUsingDELETEWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    attrName: (NSString*) attrName
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id和属性名称查询属性信息
/// 根据类目id和属性名称查询属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// @param attrName 属性名称
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) categoryAttributeListUsingGETWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    attrName: (NSString*) attrName
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id和属性名称查询属性信息
/// 根据类目id和属性名称查询属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// @param attrName 属性名称
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) categoryAttributeListUsingHEADWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    attrName: (NSString*) attrName
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id和属性名称查询属性信息
/// 根据类目id和属性名称查询属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// @param attrName 属性名称
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) categoryAttributeListUsingOPTIONSWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    attrName: (NSString*) attrName
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id和属性名称查询属性信息
/// 根据类目id和属性名称查询属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// @param attrName 属性名称
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) categoryAttributeListUsingPATCHWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    attrName: (NSString*) attrName
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id和属性名称查询属性信息
/// 根据类目id和属性名称查询属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// @param attrName 属性名称
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) categoryAttributeListUsingPOSTWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    attrName: (NSString*) attrName
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id和属性名称查询属性信息
/// 根据类目id和属性名称查询属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// @param attrName 属性名称
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) categoryAttributeListUsingPUTWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    attrName: (NSString*) attrName
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 所有筛选条件信息
/// 所有筛选条件信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) conditionListUsingDELETEWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 所有筛选条件信息
/// 所有筛选条件信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) conditionListUsingGETWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 所有筛选条件信息
/// 所有筛选条件信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) conditionListUsingHEADWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 所有筛选条件信息
/// 所有筛选条件信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) conditionListUsingOPTIONSWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 所有筛选条件信息
/// 所有筛选条件信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) conditionListUsingPATCHWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 所有筛选条件信息
/// 所有筛选条件信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) conditionListUsingPOSTWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 所有筛选条件信息
/// 所有筛选条件信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) conditionListUsingPUTWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理根据类目显示所有的筛选条件
/// 商品管理根据类目id显示所有的筛选条件
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionAttributeListUsingDELETEWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理根据类目显示所有的筛选条件
/// 商品管理根据类目id显示所有的筛选条件
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionAttributeListUsingGETWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理根据类目显示所有的筛选条件
/// 商品管理根据类目id显示所有的筛选条件
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionAttributeListUsingHEADWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理根据类目显示所有的筛选条件
/// 商品管理根据类目id显示所有的筛选条件
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionAttributeListUsingOPTIONSWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理根据类目显示所有的筛选条件
/// 商品管理根据类目id显示所有的筛选条件
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionAttributeListUsingPATCHWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理根据类目显示所有的筛选条件
/// 商品管理根据类目id显示所有的筛选条件
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionAttributeListUsingPOSTWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理根据类目显示所有的筛选条件
/// 商品管理根据类目id显示所有的筛选条件
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param categoryId 类目id (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionAttributeListUsingPUTWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理显示类目
/// 商品管理显示类目
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionListUsingDELETEWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理显示类目
/// 商品管理显示类目
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionListUsingGETWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理显示类目
/// 商品管理显示类目
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionListUsingHEADWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理显示类目
/// 商品管理显示类目
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionListUsingOPTIONSWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理显示类目
/// 商品管理显示类目
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionListUsingPATCHWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理显示类目
/// 商品管理显示类目
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionListUsingPOSTWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 商品管理显示类目
/// 商品管理显示类目
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) goodsConditionListUsingPUTWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 添加类目的属性信息
/// 添加类目的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param mallCategoryAttribute mallCategoryAttribute (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) insertMallCategoryAttributeUsingDELETEWithAuthorization: (NSString*) authorization
    mallCategoryAttribute: (SWGMallCategoryAttribute*) mallCategoryAttribute
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 添加类目的属性信息
/// 添加类目的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param mallCategoryAttribute mallCategoryAttribute (optional)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) insertMallCategoryAttributeUsingGETWithAuthorization: (NSString*) authorization
    mallCategoryAttribute: (SWGMallCategoryAttribute*) mallCategoryAttribute
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 添加类目的属性信息
/// 添加类目的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param mallCategoryAttribute mallCategoryAttribute (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) insertMallCategoryAttributeUsingHEADWithAuthorization: (NSString*) authorization
    mallCategoryAttribute: (SWGMallCategoryAttribute*) mallCategoryAttribute
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 添加类目的属性信息
/// 添加类目的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param mallCategoryAttribute mallCategoryAttribute (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) insertMallCategoryAttributeUsingOPTIONSWithAuthorization: (NSString*) authorization
    mallCategoryAttribute: (SWGMallCategoryAttribute*) mallCategoryAttribute
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 添加类目的属性信息
/// 添加类目的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param mallCategoryAttribute mallCategoryAttribute (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) insertMallCategoryAttributeUsingPATCHWithAuthorization: (NSString*) authorization
    mallCategoryAttribute: (SWGMallCategoryAttribute*) mallCategoryAttribute
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 添加类目的属性信息
/// 添加类目的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param mallCategoryAttribute mallCategoryAttribute (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) insertMallCategoryAttributeUsingPOSTWithAuthorization: (NSString*) authorization
    mallCategoryAttribute: (SWGMallCategoryAttribute*) mallCategoryAttribute
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 添加类目的属性信息
/// 添加类目的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param mallCategoryAttribute mallCategoryAttribute (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) insertMallCategoryAttributeUsingPUTWithAuthorization: (NSString*) authorization
    mallCategoryAttribute: (SWGMallCategoryAttribute*) mallCategoryAttribute
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息及品牌信息
/// 根据类目id显示属性信息及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryAttributeUsingDELETEWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息及品牌信息
/// 根据类目id显示属性信息及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryAttributeUsingGETWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息及品牌信息
/// 根据类目id显示属性信息及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryAttributeUsingHEADWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息及品牌信息
/// 根据类目id显示属性信息及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryAttributeUsingOPTIONSWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息及品牌信息
/// 根据类目id显示属性信息及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryAttributeUsingPATCHWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息及品牌信息
/// 根据类目id显示属性信息及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryAttributeUsingPOSTWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息及品牌信息
/// 根据类目id显示属性信息及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryAttributeUsingPUTWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息
/// 根据类目id显示属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryUsingDELETEWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息
/// 根据类目id显示属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryUsingGETWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息
/// 根据类目id显示属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryUsingHEADWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息
/// 根据类目id显示属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryUsingOPTIONSWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息
/// 根据类目id显示属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryUsingPATCHWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息
/// 根据类目id显示属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryUsingPOSTWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示属性信息
/// 根据类目id显示属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param categoryId 类目id
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showCategoryUsingPUTWithAuthorization: (NSString*) authorization
    categoryId: (NSNumber*) categoryId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;



@end
