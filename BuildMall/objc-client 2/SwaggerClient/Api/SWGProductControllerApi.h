#import <Foundation/Foundation.h>
#import "SWGMessageResult.h"
#import "SWGScreenGoods.h"
#import "SWGApi.h"

/**
* Youmu Cloud Framework Swagger API 
* https://www.51wood.com
*
* OpenAPI spec version: 1.0
* Contact: archerchu@163.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGProductControllerApi: NSObject <SWGApi>

extern NSString* kSWGProductControllerApiErrorDomain;
extern NSInteger kSWGProductControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// 删除产品信息修改产品信息
/// 删除产品信息修改产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param productId productId (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) deleteProductUsingDELETEWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    productId: (NSArray<NSNumber*>*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 删除产品信息修改产品信息
/// 删除产品信息修改产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param productId productId (optional)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) deleteProductUsingGETWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    productId: (NSArray<NSNumber*>*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 删除产品信息修改产品信息
/// 删除产品信息修改产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param productId productId (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) deleteProductUsingHEADWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    productId: (NSArray<NSNumber*>*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 删除产品信息修改产品信息
/// 删除产品信息修改产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param productId productId (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) deleteProductUsingOPTIONSWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    productId: (NSArray<NSNumber*>*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 删除产品信息修改产品信息
/// 删除产品信息修改产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param productId productId (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) deleteProductUsingPATCHWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    productId: (NSArray<NSNumber*>*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 删除产品信息修改产品信息
/// 删除产品信息修改产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param productId productId (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) deleteProductUsingPOSTWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    productId: (NSArray<NSNumber*>*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 删除产品信息修改产品信息
/// 删除产品信息修改产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param storeId 店铺id
/// @param productId productId (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) deleteProductUsingPUTWithAuthorization: (NSString*) authorization
    storeId: (NSNumber*) storeId
    productId: (NSArray<NSNumber*>*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 添加产品信息
/// 添加产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) insertProductUsingGETWithAuthorization: (NSString*) authorization
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示所有属性及品牌信息
/// 根据类目id显示所有属性及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param proId 类目id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productListUsingDELETEWithAuthorization: (NSString*) authorization
    proId: (NSNumber*) proId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示所有属性及品牌信息
/// 根据类目id显示所有属性及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param proId 类目id
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productListUsingGETWithAuthorization: (NSString*) authorization
    proId: (NSNumber*) proId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示所有属性及品牌信息
/// 根据类目id显示所有属性及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param proId 类目id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productListUsingHEADWithAuthorization: (NSString*) authorization
    proId: (NSNumber*) proId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示所有属性及品牌信息
/// 根据类目id显示所有属性及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param proId 类目id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productListUsingOPTIONSWithAuthorization: (NSString*) authorization
    proId: (NSNumber*) proId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示所有属性及品牌信息
/// 根据类目id显示所有属性及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param proId 类目id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productListUsingPATCHWithAuthorization: (NSString*) authorization
    proId: (NSNumber*) proId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示所有属性及品牌信息
/// 根据类目id显示所有属性及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param proId 类目id
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productListUsingPOSTWithAuthorization: (NSString*) authorization
    proId: (NSNumber*) proId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据类目id显示所有属性及品牌信息
/// 根据类目id显示所有属性及品牌信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param proId 类目id
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productListUsingPUTWithAuthorization: (NSString*) authorization
    proId: (NSNumber*) proId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示商品的产品信息
/// 根据商品的产品id显示商品的产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 商品的产品id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productTableListUsingDELETEWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示商品的产品信息
/// 根据商品的产品id显示商品的产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 商品的产品id
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productTableListUsingGETWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示商品的产品信息
/// 根据商品的产品id显示商品的产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 商品的产品id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productTableListUsingHEADWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示商品的产品信息
/// 根据商品的产品id显示商品的产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 商品的产品id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productTableListUsingOPTIONSWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示商品的产品信息
/// 根据商品的产品id显示商品的产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 商品的产品id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productTableListUsingPATCHWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示商品的产品信息
/// 根据商品的产品id显示商品的产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 商品的产品id
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productTableListUsingPOSTWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示商品的产品信息
/// 根据商品的产品id显示商品的产品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 商品的产品id
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) productTableListUsingPUTWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据产品id显示产品及产品属性信息及商品信息
/// 根据产品id显示产品及产品属性信息及商品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 产品id
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductAttributeUsingDELETEWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据产品id显示产品及产品属性信息及商品信息
/// 根据产品id显示产品及产品属性信息及商品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 产品id
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductAttributeUsingGETWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据产品id显示产品及产品属性信息及商品信息
/// 根据产品id显示产品及产品属性信息及商品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 产品id
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductAttributeUsingHEADWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据产品id显示产品及产品属性信息及商品信息
/// 根据产品id显示产品及产品属性信息及商品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 产品id
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductAttributeUsingOPTIONSWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据产品id显示产品及产品属性信息及商品信息
/// 根据产品id显示产品及产品属性信息及商品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 产品id
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductAttributeUsingPATCHWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据产品id显示产品及产品属性信息及商品信息
/// 根据产品id显示产品及产品属性信息及商品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 产品id
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductAttributeUsingPOSTWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据产品id显示产品及产品属性信息及商品信息
/// 根据产品id显示产品及产品属性信息及商品信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 产品id
/// @param storeId 店铺id
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductAttributeUsingPUTWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    storeId: (NSNumber*) storeId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 查询所有产品信息及筛选
/// 查询所有产品信息及筛选
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param screenGoods screenGoods (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductUsingDELETEWithAuthorization: (NSString*) authorization
    screenGoods: (SWGScreenGoods*) screenGoods
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 查询所有产品信息及筛选
/// 查询所有产品信息及筛选
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param screenGoods screenGoods (optional)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductUsingGETWithAuthorization: (NSString*) authorization
    screenGoods: (SWGScreenGoods*) screenGoods
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 查询所有产品信息及筛选
/// 查询所有产品信息及筛选
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param screenGoods screenGoods (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductUsingHEADWithAuthorization: (NSString*) authorization
    screenGoods: (SWGScreenGoods*) screenGoods
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 查询所有产品信息及筛选
/// 查询所有产品信息及筛选
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param screenGoods screenGoods (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductUsingOPTIONSWithAuthorization: (NSString*) authorization
    screenGoods: (SWGScreenGoods*) screenGoods
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 查询所有产品信息及筛选
/// 查询所有产品信息及筛选
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param screenGoods screenGoods (optional)
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductUsingPATCHWithAuthorization: (NSString*) authorization
    screenGoods: (SWGScreenGoods*) screenGoods
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 查询所有产品信息及筛选
/// 查询所有产品信息及筛选
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param screenGoods screenGoods (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductUsingPOSTWithAuthorization: (NSString*) authorization
    screenGoods: (SWGScreenGoods*) screenGoods
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 查询所有产品信息及筛选
/// 查询所有产品信息及筛选
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param screenGoods screenGoods (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) selectProductUsingPUTWithAuthorization: (NSString*) authorization
    screenGoods: (SWGScreenGoods*) screenGoods
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示产品的属性信息
/// 根据产品id显示产品的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 根据产品id显示产品的属性信息
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showProductInfoUsingDELETEWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示产品的属性信息
/// 根据产品id显示产品的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 根据产品id显示产品的属性信息
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showProductInfoUsingGETWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示产品的属性信息
/// 根据产品id显示产品的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 根据产品id显示产品的属性信息
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showProductInfoUsingHEADWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示产品的属性信息
/// 根据产品id显示产品的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 根据产品id显示产品的属性信息
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showProductInfoUsingOPTIONSWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示产品的属性信息
/// 根据产品id显示产品的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 根据产品id显示产品的属性信息
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showProductInfoUsingPATCHWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示产品的属性信息
/// 根据产品id显示产品的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 根据产品id显示产品的属性信息
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showProductInfoUsingPOSTWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;


/// 根据商品的产品id显示产品的属性信息
/// 根据产品id显示产品的属性信息
///
/// @param authorization 令牌 (default to 去其他请求中获取heard中token参数)
/// @param productId 根据产品id显示产品的属性信息
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGMessageResult*
-(NSURLSessionTask*) showProductInfoUsingPUTWithAuthorization: (NSString*) authorization
    productId: (NSNumber*) productId
    completionHandler: (void (^)(SWGMessageResult* output, NSError* error)) handler;



@end
